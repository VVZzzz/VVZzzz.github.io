{"meta":{"title":"Dream it,wish it,do it!","subtitle":"Stay hungry,Stay foolish.","description":"Run's Blog","author":"Run","url":"http://yoursite.com"},"pages":[{"title":"All categories","date":"2018-01-13T18:13:36.000Z","updated":"2018-01-13T18:14:44.236Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"这儿是涵哥的地盘儿！","date":"2018-01-13T14:53:58.000Z","updated":"2018-01-14T14:48:06.627Z","comments":true,"path":"about/about.html","permalink":"http://yoursite.com/about/about.html","excerpt":"","text":"回答卑鄙是卑鄙者的通行证高尚是高尚者的墓志铭看吧在那镀金的天空中飘满了死者弯曲的倒影冰川纪过去了为什么到处都是冰凌好望角发现了为什么死海里千帆相竞我来到这个世界上只带着纸绳索和背影为了在审判之前宣读那些被判决了的声音告诉你吧世界我不相信纵使你脚下有一千名挑战者就把我算做那第一千零一名纵使你脚下有一千名挑战者就把我当做那第一千零一名我不相信天是蓝的我不相信雷的回声我不相信梦是假的我不相信死无报应如果海洋注定要决堤就让所有的苦水都注入我心中如果大地注定要上升就让人类重新选择生存的峰顶新的转机和闪闪的星斗正在缀满没有遮拦的天空那是五千年的象形文字那是未来人们凝视的眼睛如果海洋注定要决堤就让所有的苦水都注入我心中如果大地注定要上升就让人类重新选择生存的峰顶新的转机和闪闪的星斗正在没有遮拦的天空那是五千年的象形文字那是未来人们凝视的眼睛"}],"posts":[{"title":"关于各式各样的初始化","slug":"关于各式各样的初始化","date":"2018-01-17T08:50:11.000Z","updated":"2018-01-17T10:04:11.099Z","comments":true,"path":"2018/01/17/关于各式各样的初始化/","link":"","permalink":"http://yoursite.com/2018/01/17/关于各式各样的初始化/","excerpt":"","text":"关于初始化你应该知道的默认初始化我们可以理解为当我们定义一个变量时，没有指定初值，即在这个变量后面我们不加参数，比如这样:int i;此时就会发生默认初始化. 如果是内置类型. 假如这个变量是在任何函数体之外，那么它就会被默认初始化为0。 假如这个变量是定义在函数体内部，那么它是未初始化的。也就是说它的值是未定义的，任何方式对它进行访问或者拷贝等，都是错误的行为。 如果是类类型.那么就看这个类是否允许它进行默认初始化。 如果这个类的默认构造函数对这个类的成员进行了初始化，那么这个变量发生默认初始化时就是正确的行为，因为他的成员都有初始值。string str;这个时候str就被默认初始化为空字符串，因为string类可以默认初始化。 当然也有的类不支持默认初始化，这样的话它的初始值就是未定义的。CLASSA test此时test的成员的值是未定义的。 直接初始化当我们定义一个变量时，后面不用等号，而是用小括号跟着参数，这样就发生了直接初始化。比如:string hiya(&quot;nihao&quot;);int i(10); 实际上，是要求编译器使用普通的函数匹配来选择与提供的参数最匹配的构造函数，即此时发生了构造函数。 拷贝初始化当我们定义变量时，后面使用“= …”，此时发生了拷贝初始化。比如:string null-book = &quot;9-999-9999&quot;;string s = null-book;string nines = string(10,&#39;c&#39;); 实际上，此时发生了拷贝构造函数，当然这里也会有类型转换的问题，比如：int i=30.0;这个时候30.0首先会先转为int，之后再发生拷贝构造函数。注意第三个的例子，是首先发生了构造函数，之后在发生拷贝构造函数，string (10,&#39;c&#39;);是直接初始化，之后在发生拷贝初始化。 注意，把拷贝构造函数和拷贝赋值运算符分清，拷贝构造函数是用来拷贝初始化的，而拷贝赋值运算符是发生在两个已定义的变量上的，比如:int i(j);i=j;第一个是发生拷贝初始化，而第二个是拷贝赋值运算符。两个不一样。 列表初始化这里注意，列表初始化只是初始化的一种方式，当在定义变量时，后面有小括号和花括号。string s1(&quot;NiHao&quot;);string s2(10,&#39;c&#39;);vector&lt;string&gt; str{&quot;ni&quot;,&quot;hao&quot;};vector&lt;string&gt; str2(10);vector&lt;string&gt; str3(10,&quot;nihao&quot;);列表初始化可以用小括号，花括号，但意思不尽相同。对于第一个，s1就是Nihao。而s2中第一个参数是元素的个数，后面是元素，因为string可以认为是个容器。此时s2就是&#39;cccccccccc&#39;。 对于str，他的元素是两个，&quot;ni&quot;,&quot;hao&quot;。 对于str2，他的元素是10个空字符串。这里就发生了值初始化。 对于str3，同理，10个nihao。 注意，在使用列表初始化有一个特殊之处。即当因类型转换有可能会丢失信息时，编译器会报错。比如：long double ld = 3.1415926536;int a{ld},b={ld};//错误：转换未执行，因为有可能丢失信息int c(ld),d=ld;//正确：转换可以执行。这里注意花括号和圆括号，花括号的特殊性。 值初始化值初始化是当我们使用vector等容器时，如果我们只提供容纳元素的数量，而不给出初始值时，这个时候库会创建一个已经值初始化（即自动给一个初始值用来初始化）的元素初值，并将它赋给所有元素。 如果vector的元素是内置类型，那么这个初始值自动设为0。比如：vector&lt;int&gt; vec(10);//10个元素，每个都被初始化为0 如果是类类型，那么这个值初始化就是默认初始化，比如：vector&lt;string&gt; svec(10);//10个空string 使用这种初始化方式有两个限制： 有些类明确要求要提供初始值，这种情况我们不使用初始值时，就会造成无法完成初始化的工作。 如果只提供元素数量，而没有提供元素初始值，我们只能用直接初始化，而不能用拷贝初始化。vector&lt;int&gt; vi = 10;//错误： 必须使用直接初始化 你学到了么？之前更多的知识可以查看我的CSDN博客","categories":[{"name":"C++ primer","slug":"C-primer","permalink":"http://yoursite.com/categories/C-primer/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://yoursite.com/tags/C/"},{"name":"初始化","slug":"初始化","permalink":"http://yoursite.com/tags/初始化/"}]},{"title":"（二）将序列图进行体绘制显示","slug":"（二）将序列图进行体绘制显示","date":"2018-01-16T07:49:34.000Z","updated":"2018-01-16T08:07:33.919Z","comments":true,"path":"2018/01/16/（二）将序列图进行体绘制显示/","link":"","permalink":"http://yoursite.com/2018/01/16/（二）将序列图进行体绘制显示/","excerpt":"","text":"将序列图进行体绘制思路 使用vtk中BMPreader直接读入序列图，构成一个数据体，之后直接用体绘制算法，这里我们使用光线投射算法进行显示。这个思路是我在刚接触VTK时候，直接按照&lt;&gt;的读取序列图例子来做的，在这个过程中卡在调整颜色传递函数和透明度传递函数卡了很久。并且发现按这种方式只能读入8位的BMP序列图进行体绘制显示，读入24位的显示是错误的，相当于将这个24位的图片分开成3份来显示。之后发现是元组默认是单元组。这是用这个方法进行显示得到的三维图像。","categories":[{"name":"毕业设计:三维显示","slug":"毕业设计-三维显示","permalink":"http://yoursite.com/categories/毕业设计-三维显示/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://yoursite.com/tags/C/"},{"name":"VTK","slug":"VTK","permalink":"http://yoursite.com/tags/VTK/"},{"name":"MFC","slug":"MFC","permalink":"http://yoursite.com/tags/MFC/"}]},{"title":"TestB","slug":"TestB","date":"2018-01-13T14:53:58.000Z","updated":"2018-01-13T18:07:02.381Z","comments":true,"path":"2018/01/13/TestB/","link":"","permalink":"http://yoursite.com/2018/01/13/TestB/","excerpt":"","text":"#jklsd ##jkflj ###jkljfskaljfasf","categories":[{"name":"Coding","slug":"Coding","permalink":"http://yoursite.com/categories/Coding/"}],"tags":[{"name":"TestA","slug":"TestA","permalink":"http://yoursite.com/tags/TestA/"},{"name":"TestB","slug":"TestB","permalink":"http://yoursite.com/tags/TestB/"}]},{"title":"Testa","slug":"TestA","date":"2018-01-13T14:53:58.000Z","updated":"2018-01-14T14:46:43.589Z","comments":true,"path":"2018/01/13/TestA/","link":"","permalink":"http://yoursite.com/2018/01/13/TestA/","excerpt":"","text":"jklsdjkflj###jkljfskaljfasf","categories":[{"name":"Diary","slug":"Diary","permalink":"http://yoursite.com/categories/Diary/"}],"tags":[{"name":"TestA","slug":"TestA","permalink":"http://yoursite.com/tags/TestA/"},{"name":"TestB","slug":"TestB","permalink":"http://yoursite.com/tags/TestB/"}]},{"title":"test_my_site","slug":"test-my-site","date":"2018-01-12T06:03:11.000Z","updated":"2018-01-12T06:03:11.093Z","comments":true,"path":"2018/01/12/test-my-site/","link":"","permalink":"http://yoursite.com/2018/01/12/test-my-site/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2018-01-12T05:56:50.281Z","updated":"2018-01-12T05:56:50.281Z","comments":true,"path":"2018/01/12/hello-world/","link":"","permalink":"http://yoursite.com/2018/01/12/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}