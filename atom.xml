<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Run</title>
  
  <subtitle>Stay hungry,Stay foolish.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-25T07:06:38.731Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Run</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++ primer 9.4节练习</title>
    <link href="http://yoursite.com/2018/01/25/C-primer-9-4%E8%8A%82%E7%BB%83%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/01/25/C-primer-9-4节练习/</id>
    <published>2018-01-25T07:05:16.000Z</published>
    <updated>2018-01-25T07:06:38.731Z</updated>
    
    <content type="html"><![CDATA[<h2 id="9-38-vector的增长"><a href="#9-38-vector的增长" class="headerlink" title="9.38 vector的增长"></a>9.38 vector的增长</h2><pre><code>//*******************9.4节练习*********************//*******************9.38 vector的增长*************************vector&lt;int&gt; ivec;int s, c;for (int i = 0; i &lt; 15; i++){    for (s = ivec.size(), c = ivec.capacity(); s &lt;= c; s++)        ivec.push_back(1);    cout &lt;&lt; &quot;分配的内存空间： &quot; &lt;&lt; ivec.capacity() &lt;&lt; &quot; 元素个数： &quot; &lt;&lt; ivec.size() &lt;&lt; endl;}std::system(&quot;pause&quot;);return 0;  </code></pre><p><img src="https://i.imgur.com/twOrehe.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;9-38-vector的增长&quot;&gt;&lt;a href=&quot;#9-38-vector的增长&quot; class=&quot;headerlink&quot; title=&quot;9.38 vector的增长&quot;&gt;&lt;/a&gt;9.38 vector的增长&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;//************
      
    
    </summary>
    
      <category term="C++ primer" scheme="http://yoursite.com/categories/C-primer/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="练习" scheme="http://yoursite.com/tags/%E7%BB%83%E4%B9%A0/"/>
    
      <category term="顺序容器" scheme="http://yoursite.com/tags/%E9%A1%BA%E5%BA%8F%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>C++ primer 9.3.6节练习</title>
    <link href="http://yoursite.com/2018/01/25/C-primer-9-3-6%E8%8A%82%E7%BB%83%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/01/25/C-primer-9-3-6节练习/</id>
    <published>2018-01-25T07:01:32.000Z</published>
    <updated>2018-01-25T07:04:37.766Z</updated>
    
    <content type="html"><![CDATA[<h2 id="9-31节练习"><a href="#9-31节练习" class="headerlink" title="9.31节练习"></a>9.31节练习</h2><pre><code>//*****************9.3.6节 9.31练习***********************//******************list和forward_list的迭代器不支持+常数***************************list&lt;int&gt; li = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };auto liter = li.begin();auto lend = li.end();while (liter != lend)//此处注意，list和forward_list的end(),即迭代器 元素指针 引用不会失效{    if (*liter &amp; 1)//奇数，复制    {        liter = li.insert(liter, *liter);        ++liter;        ++liter;//list和forward_list不支持 liter+2这种操作    }    else//偶数，删除    {        liter = li.erase(liter);    }}for (auto i : li){    cout &lt;&lt; i &lt;&lt; &quot; &quot;;}cout &lt;&lt; endl;//**********************************forward_list******************************forward_list&lt;int&gt; fli = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };//对于forward_list 一定要首前指针auto fli_pre = fli.before_begin();//首前指针auto fli_curr = fli.begin();//当前指针auto fli_end = fli.end();//尾后指针while (fli_curr != fli_end){    if (*fli_curr &amp; 1)//如果是奇数    {        fli_curr = fli.insert_after(fli_curr, *fli_curr);        fli_pre = fli_curr++;        //相当于pre指向的是添加的元素，而curr是元素之后的    }    else    {        fli_curr = fli.erase_after(fli_pre);        //不用移动，因为curr指向的是删除元素的后一个    }}for (auto i : fli){    cout &lt;&lt; i &lt;&lt; &quot; &quot;;}cout &lt;&lt; endl;std::system(&quot;pause&quot;);return 0;  </code></pre><p>注意，当对顺序容器添加和删除操作的时候，有些容器的迭代器，指针，引用会失效，这个时候一定要每次都调用.begin()等，而不是“一赋永逸”。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;9-31节练习&quot;&gt;&lt;a href=&quot;#9-31节练习&quot; class=&quot;headerlink&quot; title=&quot;9.31节练习&quot;&gt;&lt;/a&gt;9.31节练习&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;//*****************9.3.6节 9.31练习**********
      
    
    </summary>
    
      <category term="C++ primer" scheme="http://yoursite.com/categories/C-primer/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="练习" scheme="http://yoursite.com/tags/%E7%BB%83%E4%B9%A0/"/>
    
      <category term="顺序容器" scheme="http://yoursite.com/tags/%E9%A1%BA%E5%BA%8F%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>C++ primer 9.3.4节练习</title>
    <link href="http://yoursite.com/2018/01/25/C-primer-9-3-4%E8%8A%82%E7%BB%83%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/01/25/C-primer-9-3-4节练习/</id>
    <published>2018-01-25T06:54:29.000Z</published>
    <updated>2018-01-25T07:00:36.116Z</updated>
    
    <content type="html"><![CDATA[<h2 id="9-27练习"><a href="#9-27练习" class="headerlink" title="9.27练习"></a>9.27练习</h2><pre><code>//*****************9.3.4节 9.27练习***********************//******************单链表的删除***************************forward_list&lt;int&gt; flist = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };auto pre = flist.before_begin();//获取首前指针auto curr = flist.begin();//获取当前指针while (curr != flist.end()){    if (*curr &amp; 1)        curr = flist.erase_after(pre);//删除pre之后的元素,并返回删除元素之后的迭代器    else //否则pre curr就都向后移动    {        pre = curr;        curr++;    }}for (auto i : flist)    cout &lt;&lt; i &lt;&lt; endl;std::system(&quot;pause&quot;);return 0;  </code></pre><p>对于单链表来说，一定要得到他的首前迭代器。因为erase_after是要删除当前迭代器之后的元素。所以如果想删除第一个元素，就要得到首前迭代器。 insert_after也是同理。</p><h2 id="9-28节练习"><a href="#9-28节练习" class="headerlink" title="9.28节练习"></a>9.28节练习</h2><pre><code>void Processlist(forward_list&lt;string&gt; &amp;sl, string &amp;str1, string &amp;str2)</code></pre><p><code>{</code> </p><pre><code>auto pre = sl.before_begin();//首前auto curr = sl.begin();//当前bool NoObj = true;while (curr != sl.end()){    if (*curr == str1)    {        curr = sl.insert_after(curr, str2);        NoObj = false;    }    pre = curr;        ++curr;}if (NoObj){    pre = sl.insert_after(pre, str2);}</code></pre><p><code>}</code> </p><pre><code>//*****************9.3.4节 9.28练习***********************//******************单链表的增添改查***************************forward_list&lt;string&gt; slist = { &quot;ni&quot;, &quot;hao&quot;, &quot;shijie&quot;, &quot;hello&quot;, &quot;world&quot; };string str1 = &quot;ni&quot;,str2=&quot;NO&quot;, str3 = &quot;ADD&quot;;Processlist(slist, str2, str3);for (auto i : slist)    cout &lt;&lt; i &lt;&lt; &quot; &quot;;cout &lt;&lt; endl;std::system(&quot;pause&quot;);return 0; </code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;9-27练习&quot;&gt;&lt;a href=&quot;#9-27练习&quot; class=&quot;headerlink&quot; title=&quot;9.27练习&quot;&gt;&lt;/a&gt;9.27练习&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;//*****************9.3.4节 9.27练习**************
      
    
    </summary>
    
      <category term="C++ primer" scheme="http://yoursite.com/categories/C-primer/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="练习" scheme="http://yoursite.com/tags/%E7%BB%83%E4%B9%A0/"/>
    
      <category term="顺序容器" scheme="http://yoursite.com/tags/%E9%A1%BA%E5%BA%8F%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>C++ primer 9.3.3节练习</title>
    <link href="http://yoursite.com/2018/01/25/C-primer-9-33%E8%8A%82%E7%BB%83%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/01/25/C-primer-9-33节练习/</id>
    <published>2018-01-25T06:51:02.000Z</published>
    <updated>2018-01-25T06:54:49.318Z</updated>
    
    <content type="html"><![CDATA[<h2 id="9-33节练习"><a href="#9-33节练习" class="headerlink" title="9.33节练习"></a>9.33节练习</h2><pre><code>//*****************9.3.3节 9.26练习***********************int ia[] = { 0, 1, 1, 2, 3, 5, 8, 13, 21, 55, 89 };vector&lt;int&gt; ivec;list&lt;int&gt; ilist;for (auto i : ia){    ivec.push_back(i);    ilist.push_back(i);}int l = sizeof(ia) / sizeof(int);auto itervec = ivec.begin();auto iterlist = ilist.begin();while (l--)//循环ia的元素个数次{    if (*itervec &amp; 1)        itervec++;    else        itervec = ivec.erase(itervec);    if (*iterlist &amp; 1)        iterlist = ilist.erase(iterlist);    else        iterlist++;}for (auto i : ivec)    cout &lt;&lt; i &lt;&lt; &quot; &quot;;cout &lt;&lt; endl;for (auto i : ilist)    cout &lt;&lt; i &lt;&lt; &quot; &quot;;cout &lt;&lt; endl;std::system(&quot;pause&quot;);return 0; </code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;9-33节练习&quot;&gt;&lt;a href=&quot;#9-33节练习&quot; class=&quot;headerlink&quot; title=&quot;9.33节练习&quot;&gt;&lt;/a&gt;9.33节练习&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;//*****************9.3.3节 9.26练习**********
      
    
    </summary>
    
      <category term="C++ primer" scheme="http://yoursite.com/categories/C-primer/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="练习" scheme="http://yoursite.com/tags/%E7%BB%83%E4%B9%A0/"/>
    
      <category term="顺序容器" scheme="http://yoursite.com/tags/%E9%A1%BA%E5%BA%8F%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>C++ primer 9.3.2节练习</title>
    <link href="http://yoursite.com/2018/01/25/C++primer-9.3.2%E8%8A%82%E7%BB%83%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/01/25/C++primer-9.3.2节练习/</id>
    <published>2018-01-25T06:46:15.000Z</published>
    <updated>2018-01-25T06:49:43.697Z</updated>
    
    <content type="html"><![CDATA[<h2 id="9-24练习"><a href="#9-24练习" class="headerlink" title="9.24练习"></a>9.24练习</h2><pre><code>//*****************9.24练习***********************vector&lt;int&gt; ivec;cout &lt;&lt; ivec.at(0) &lt;&lt; endl;//使用at()cout &lt;&lt; ivec[0] &lt;&lt; endl;//使用下标运算符cout &lt;&lt; ivec.front() &lt;&lt; endl;//调用front()cout &lt;&lt; ivec.back() &lt;&lt; endl;//调用back()std::system(&quot;pause&quot;);return 0;  </code></pre><p>使用at()访问，是安全的，超出范围会抛出异常。而下标运算符是不安全的：<br><img src="https://i.imgur.com/s7JjKmo.png" alt=""> </p><p><img src="https://i.imgur.com/hKf8nou.png" alt=""> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;9-24练习&quot;&gt;&lt;a href=&quot;#9-24练习&quot; class=&quot;headerlink&quot; title=&quot;9.24练习&quot;&gt;&lt;/a&gt;9.24练习&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;//*****************9.24练习*********************
      
    
    </summary>
    
      <category term="C++ primer" scheme="http://yoursite.com/categories/C-primer/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="练习" scheme="http://yoursite.com/tags/%E7%BB%83%E4%B9%A0/"/>
    
      <category term="顺序容器" scheme="http://yoursite.com/tags/%E9%A1%BA%E5%BA%8F%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>C++ primer 9.3.1节练习</title>
    <link href="http://yoursite.com/2018/01/25/C++primer-9.3.1%E8%8A%82%E7%BB%83%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/01/25/C++primer-9.3.1节练习/</id>
    <published>2018-01-25T06:41:15.000Z</published>
    <updated>2018-01-25T06:45:15.803Z</updated>
    
    <content type="html"><![CDATA[<h1 id="9-3-1节练习"><a href="#9-3-1节练习" class="headerlink" title="9.3.1节练习"></a>9.3.1节练习</h1><h2 id="9-18-9-21"><a href="#9-18-9-21" class="headerlink" title="9.18 - 9.21"></a>9.18 - 9.21</h2><pre><code>//***********9.3.1节练习 9.18**************string temp;deque&lt;string&gt; sdeq;//默认初始化while (cin &gt;&gt; temp){    sdeq.push_back(temp);}for (auto i = sdeq.cbegin(); i != sdeq.cend(); ++i)    cout &lt;&lt; *i &lt;&lt; endl;//***********9.19************************list&lt;string&gt; slist;string temp1;while (cin &gt;&gt; temp1){    slist.push_back(temp1);}for (auto i = slist.cbegin(); i != slist.cend(); ++i)    cout &lt;&lt; *i &lt;&lt; endl;//故和上一个练习相比，并无太多改动//*************9.20***********************list&lt;int&gt; ilist;for (int i = 0; i != 10; ++i){    ilist.push_back(i);}deque&lt;int&gt; odddeq,evendeq;for (auto i = ilist.cbegin(); i != ilist.cend(); ++i){    if (*i &amp; 1 )//用逻辑位与运算，和%2等价        odddeq.push_back(*i);    else        evendeq.push_back(*i);}//**************9.21**********************vector&lt;string&gt; svec;string word;auto iter = svec.begin();while (cin &gt;&gt; word){    iter = svec.insert(iter, word);}for (auto i : svec)    cout &lt;&lt; i &lt;&lt; endl;//此操作相当于一直push_front，从而元素是倒序的std::system(&quot;pause&quot;);return 0;  </code></pre><h2 id="9-22"><a href="#9-22" class="headerlink" title="9.22"></a>9.22</h2><pre><code>//*****************9.22练习***********************//目的是检查，前一半元素中如果有和some_val相等的元素的，就在他前面插入一个2*some_val//而错误程序是，当插入元素时，原本的迭代器会失效，所以我们要更新这个mid，让他始终在最初始的位置vector&lt;int&gt; test = { 1, 2, 1, 3, 1, 5, 2, 1, 4, 1 };for (auto i : test){    cout &lt;&lt; i &lt;&lt; &quot; &quot;;}cout &lt;&lt; endl;int some_val = 1;int newsum = 0;//用来记录插入的新元素的个数size_t org_size = test.size();vector&lt;int&gt;::iterator iter = test.begin();while (iter != test.begin() + org_size / 2 + newsum)// !=后面是新的mid位置{    if (*iter == some_val)    {        iter = test.insert(iter, 2 * some_val);        iter += 2;        newsum++;    }    else        iter++;}for (auto i : test){    cout &lt;&lt; i &lt;&lt; &quot; &quot;;}cout &lt;&lt; endl;std::system(&quot;pause&quot;);return 0; </code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;9-3-1节练习&quot;&gt;&lt;a href=&quot;#9-3-1节练习&quot; class=&quot;headerlink&quot; title=&quot;9.3.1节练习&quot;&gt;&lt;/a&gt;9.3.1节练习&lt;/h1&gt;&lt;h2 id=&quot;9-18-9-21&quot;&gt;&lt;a href=&quot;#9-18-9-21&quot; class=&quot;he
      
    
    </summary>
    
      <category term="C++ primer" scheme="http://yoursite.com/categories/C-primer/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="练习" scheme="http://yoursite.com/tags/%E7%BB%83%E4%B9%A0/"/>
    
      <category term="顺序容器" scheme="http://yoursite.com/tags/%E9%A1%BA%E5%BA%8F%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>C++ primer 9.2.1-4节练习</title>
    <link href="http://yoursite.com/2018/01/25/C++primer-9.2.1-4%E8%8A%82%E7%BB%83%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/01/25/C++primer-9.2.1-4节练习/</id>
    <published>2018-01-25T06:17:44.000Z</published>
    <updated>2018-01-25T06:39:47.346Z</updated>
    
    <content type="html"><![CDATA[<h1 id="9-2-1节练习"><a href="#9-2-1节练习" class="headerlink" title="9.2.1节练习"></a>9.2.1节练习</h1><h2 id="9-5"><a href="#9-5" class="headerlink" title="9.5"></a>9.5</h2><pre><code>using namespace std;using iter = vector&lt;int&gt;::iterator;iter f1(iter beg, iter end, int object){    iter ptr = beg;    while (ptr != end)    {        if (*ptr++ == object)            return --ptr;    }    return ptr;}int main(){    vector&lt;int&gt; test;    int count=10;    while (count != 0)    {        test.push_back(count--);    }    auto i = test.begin();    **//返回目标的下标**    cout &lt;&lt; f1(i, i + 8, 5)-i &lt;&lt; endl;    system(&quot;pause&quot;);    return 0; }</code></pre><h1 id="9-24"><a href="#9-24" class="headerlink" title="9.24"></a>9.24</h1><h2 id="9-11"><a href="#9-11" class="headerlink" title="9.11"></a>9.11</h2><p><strong>9.2.4节练习,9.11</strong></p><p><strong>6种创建并初始化顺序容器的方法</strong> </p><pre><code>//***********方法1 默认构造函数*************vector&lt;int&gt; ivec1;//默认构造函数，为空。对于array则会进行默认初始化array&lt;int, 5&gt; iary1;//默认初始化//***********方法2 拷贝初始化***************vector&lt;int&gt; ivec2(ivec1);//ivec2初始化为ivec1的拷贝vector&lt;int&gt; ivec3 = ivec1;//***********方法3 列表初始化***************//vector&lt;int&gt; ivec4{ 3.5678942164, 3.268974 };//错误：列表初始化当发生信息丢失的数据转换时会报错vector&lt;double&gt;    dvec1{ 1, 2, 3 };//正确：不会发生信息丢失vector&lt;double&gt;    dvec2 = { 1, 2, 3 };array&lt;int, 5&gt;   iary2 = {  1, 2  };//后面3个都被值初始化，即1 2 0 0 0array&lt;int, 5&gt;   iary3 = { { 1, 2 } };//和上一句是同理//array&lt;int, 5&gt;   iary4{ 1,2,3 };//可以这样直接初始化，后面的元素同样被值初始化为0，编译器也可以通过 //但是这样vs2013会说不能对此子对象初始值设定项省略大括号，但不影响生成//cout &lt;&lt; iary4[1] &lt;&lt; endl;//**********方法4 迭代器范围初始化*************vector&lt;int&gt; ivec4(dvec1.begin(), dvec1.end());//此时可以要求容器类型和元素类型都不相同，只要可以发生类型转换即可//**********方法5 只给出容器大小参数vector&lt;int&gt; ivec5(10);//进行值初始化//**********方法6 给出大小参数和初始值vector&lt;int&gt; ivec6(10, 2); </code></pre><p>结果如图：<br><img src="https://i.imgur.com/uQFP6He.png" alt=""> </p><p><img src="https://i.imgur.com/a5IsSir.png" alt=""></p><h2 id="9-13"><a href="#9-13" class="headerlink" title="9.13"></a>9.13</h2><pre><code>//*********从list&lt;int&gt;初始化一个vecotr&lt;double&gt;**********list&lt;int&gt; ilist(10, 1);//定义一个10个元素为1的listvector&lt;double&gt; dvec(ilist.begin(), ilist.end());//用迭代器范围初始化//*********从vector&lt;int&gt;初始化vector&lt;double&gt;************vector&lt;int&gt; ivec(10, 1);vector&lt;double&gt; dvec2(ivec.begin(),ivec.end());std::system(&quot;pause&quot;);return 0; </code></pre><h2 id="9-14"><a href="#9-14" class="headerlink" title="9.14"></a>9.14</h2><pre><code>list&lt;char *&gt; slist = { &quot;hello&quot;, &quot;world&quot;, &quot;!&quot; };//vector&lt;string&gt; svec = slist;//错误：初始化要求两个类型匹配vector&lt;string&gt; svec;//svec = slist;//错误：赋值需要两个类型匹配svec.assign(slist.begin(), slist.end());//正确：这样的赋值是对的，并且可以发生类型转换std::system(&quot;pause&quot;);return 0; </code></pre><p>之前更多的知识可以查看我的<a href="http://write.blog.csdn.net/postlist" target="_blank" rel="noopener">CSDN博客</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;9-2-1节练习&quot;&gt;&lt;a href=&quot;#9-2-1节练习&quot; class=&quot;headerlink&quot; title=&quot;9.2.1节练习&quot;&gt;&lt;/a&gt;9.2.1节练习&lt;/h1&gt;&lt;h2 id=&quot;9-5&quot;&gt;&lt;a href=&quot;#9-5&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="C++ primer" scheme="http://yoursite.com/categories/C-primer/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="练习" scheme="http://yoursite.com/tags/%E7%BB%83%E4%B9%A0/"/>
    
      <category term="顺序容器" scheme="http://yoursite.com/tags/%E9%A1%BA%E5%BA%8F%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>关于各式各样的初始化</title>
    <link href="http://yoursite.com/2018/01/17/%E5%85%B3%E4%BA%8E%E5%90%84%E5%BC%8F%E5%90%84%E6%A0%B7%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    <id>http://yoursite.com/2018/01/17/关于各式各样的初始化/</id>
    <published>2018-01-17T08:50:11.000Z</published>
    <updated>2018-01-17T10:04:11.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于初始化你应该知道的"><a href="#关于初始化你应该知道的" class="headerlink" title="关于初始化你应该知道的"></a>关于初始化你应该知道的</h1><h2 id="默认初始化"><a href="#默认初始化" class="headerlink" title="默认初始化"></a>默认初始化</h2><p>我们可以理解为当我们定义一个变量时，没有指定初值，即在这个变量后面我们不加参数，比如这样:<br><code>int i;</code><br>此时就会发生默认初始化.  </p><ol><li><p>如果是内置类型.  </p><ul><li>假如这个变量是在任何函数体之外，那么它就会被默认初始化为0。  </li><li>假如这个变量是定义在函数体内部，那么它是未初始化的。也就是说它的值是未定义的，任何方式对它进行访问或者拷贝等，都是错误的行为。  </li></ul></li><li><p>如果是类类型.<br>那么就看这个类是否允许它进行默认初始化。  </p><ul><li>如果这个类的默认构造函数对这个类的成员进行了初始化，那么这个变量发生默认初始化时就是正确的行为，因为他的成员都有初始值。<br><code>string str;</code><br>这个时候str就被默认初始化为空字符串，因为string类可以默认初始化。</li><li>当然也有的类不支持默认初始化，这样的话它的初始值就是未定义的。<br><code>CLASSA test</code><br>此时test的成员的值是未定义的。  </li></ul></li></ol><h2 id="直接初始化"><a href="#直接初始化" class="headerlink" title="直接初始化"></a>直接初始化</h2><p>当我们定义一个变量时，后面不用等号，而是用小括号跟着参数，这样就发生了直接初始化。比如:<br><code>string hiya(&quot;nihao&quot;);</code><br><code>int i(10);</code></p><ul><li>实际上，是要求编译器使用普通的函数匹配来选择与提供的参数最匹配的构造函数，即此时发生了<strong>构造函数</strong>。  </li></ul><h2 id="拷贝初始化"><a href="#拷贝初始化" class="headerlink" title="拷贝初始化"></a>拷贝初始化</h2><p>当我们定义变量时，后面使用“= …”，此时发生了拷贝初始化。比如:<br><code>string null-book = &quot;9-999-9999&quot;;</code><br><code>string s = null-book;</code><br><code>string nines = string(10,&#39;c&#39;);</code>  </p><ul><li><p>实际上，此时发生了<strong>拷贝构造函数</strong>，当然这里也会有类型转换的问题，比如：<br><code>int i=30.0;</code><br>这个时候<code>30.0</code>首先会先转为<code>int</code>，之后再发生拷贝构造函数。注意第三个的例子，是首先发生了<code>构造函数</code>，之后在发生<code>拷贝构造函数</code>，<code>string (10,&#39;c&#39;);</code>是直接初始化，之后在发生拷贝初始化。  </p></li><li><p>注意，把<strong>拷贝构造函数</strong>和<strong>拷贝赋值运算符</strong>分清，拷贝构造函数是用来拷贝初始化的，而拷贝赋值运算符是发生在两个已定义的变量上的，比如:<br><code>int i(j);</code><br><code>i=j;</code><br>第一个是发生拷贝初始化，而第二个是拷贝赋值运算符。两个不一样。  </p></li></ul><h2 id="列表初始化"><a href="#列表初始化" class="headerlink" title="列表初始化"></a>列表初始化</h2><p>这里注意，列表初始化只是初始化的一种方式，当在定义变量时，后面有小括号和花括号。<br><code>string s1(&quot;NiHao&quot;);</code><br><code>string s2(10,&#39;c&#39;);</code><br><code>vector&lt;string&gt; str{&quot;ni&quot;,&quot;hao&quot;};</code><br><code>vector&lt;string&gt; str2(10);</code><br><code>vector&lt;string&gt; str3(10,&quot;nihao&quot;);</code><br>列表初始化可以用小括号，花括号，但意思不尽相同。<br>对于第一个，s1就是<code>Nihao</code>。而s2中第一个参数是元素的个数，后面是元素，因为string可以认为是个容器。此时s2就是<code>&#39;cccccccccc&#39;</code>。  </p><ul><li>对于<code>str</code>，他的元素是两个，<code>&quot;ni&quot;</code>,<code>&quot;hao&quot;</code>。  </li><li>对于<code>str2</code>，他的元素是10个空字符串。这里就发生了<strong>值初始化</strong>。</li><li><p>对于<code>str3</code>，同理，10个<code>nihao</code>。  </p></li><li><p>注意，在使用列表初始化有一个特殊之处。即当因类型转换有可能会丢失信息时，编译器会报错。比如：<br><code>long double ld = 3.1415926536;</code><br><code>int a{ld},b={ld};</code>//错误：转换未执行，因为有可能丢失信息<br><code>int c(ld),d=ld;</code>//正确：转换可以执行。<br>这里注意花括号和圆括号，花括号的特殊性。  </p></li></ul><h2 id="值初始化"><a href="#值初始化" class="headerlink" title="值初始化"></a>值初始化</h2><p>值初始化是当我们使用vector等容器时，如果我们只提供容纳元素的数量，而不给出初始值时，这个时候库会创建一个已经值初始化（即自动给一个初始值用来初始化）的元素初值，并将它赋给所有元素。</p><ul><li><p>如果vector的元素是内置类型，那么这个初始值自动设为0。比如：<br><code>vector&lt;int&gt; vec(10);</code>//10个元素，每个都被初始化为0  </p></li><li><p>如果是类类型，那么这个值初始化就是默认初始化，比如：<br><code>vector&lt;string&gt; svec(10);</code>//10个空string  </p></li><li><p>使用这种初始化方式有两个限制：  </p><ol><li>有些类明确要求要提供初始值，这种情况我们不使用初始值时，就会造成无法完成初始化的工作。  </li><li>如果只提供元素数量，而没有提供元素初始值，我们只能用<code>直接初始化</code>，而不能用<code>拷贝初始化</code>。<br><code>vector&lt;int&gt; vi = 10;</code>//错误： 必须使用直接初始化  </li></ol></li></ul><h2 id="你学到了么？"><a href="#你学到了么？" class="headerlink" title="你学到了么？"></a>你学到了么？</h2><p>之前更多的知识可以查看我的<a href="http://write.blog.csdn.net/postlist" target="_blank" rel="noopener">CSDN博客</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;关于初始化你应该知道的&quot;&gt;&lt;a href=&quot;#关于初始化你应该知道的&quot; class=&quot;headerlink&quot; title=&quot;关于初始化你应该知道的&quot;&gt;&lt;/a&gt;关于初始化你应该知道的&lt;/h1&gt;&lt;h2 id=&quot;默认初始化&quot;&gt;&lt;a href=&quot;#默认初始化&quot; class
      
    
    </summary>
    
      <category term="C++ primer" scheme="http://yoursite.com/categories/C-primer/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="初始化" scheme="http://yoursite.com/tags/%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>（二）将序列图进行体绘制显示</title>
    <link href="http://yoursite.com/2018/01/16/%EF%BC%88%E4%BA%8C%EF%BC%89%E5%B0%86%E5%BA%8F%E5%88%97%E5%9B%BE%E8%BF%9B%E8%A1%8C%E4%BD%93%E7%BB%98%E5%88%B6%E6%98%BE%E7%A4%BA/"/>
    <id>http://yoursite.com/2018/01/16/（二）将序列图进行体绘制显示/</id>
    <published>2018-01-16T07:49:34.000Z</published>
    <updated>2018-01-16T08:07:33.919Z</updated>
    
    <content type="html"><![CDATA[<h1 id="将序列图进行体绘制"><a href="#将序列图进行体绘制" class="headerlink" title="将序列图进行体绘制"></a>将序列图进行体绘制</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>使用vtk中BMPreader直接读入序列图，构成一个数据体，之后直接用体绘制算法，这里我们使用光线投射算法进行显示。这个思路是我在刚接触VTK时候，直接按照<a href="http://blog.csdn.net/www_doling_net/article/details/8763686" target="_blank" rel="noopener">&lt;<vtk图形图像进阶>&gt;</vtk图形图像进阶></a>的读取序列图例子来做的，在这个过程中卡在调整颜色传递函数和透明度传递函数卡了很久。并且发现按这种方式只能读入8位的BMP序列图进行体绘制显示，读入24位的显示是错误的，相当于将这个24位的图片分开成3份来显示。之后发现是元组默认是单元组。这是用这个方法进行显示得到的三维图像。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;将序列图进行体绘制&quot;&gt;&lt;a href=&quot;#将序列图进行体绘制&quot; class=&quot;headerlink&quot; title=&quot;将序列图进行体绘制&quot;&gt;&lt;/a&gt;将序列图进行体绘制&lt;/h1&gt;&lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="毕业设计:三维显示" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1-%E4%B8%89%E7%BB%B4%E6%98%BE%E7%A4%BA/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="VTK" scheme="http://yoursite.com/tags/VTK/"/>
    
      <category term="MFC" scheme="http://yoursite.com/tags/MFC/"/>
    
  </entry>
  
  <entry>
    <title>Testa</title>
    <link href="http://yoursite.com/2018/01/13/TestA/"/>
    <id>http://yoursite.com/2018/01/13/TestA/</id>
    <published>2018-01-13T14:53:58.000Z</published>
    <updated>2018-01-14T14:46:43.589Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jklsd"><a href="#jklsd" class="headerlink" title="jklsd"></a>jklsd</h1><h3 id="jkflj"><a href="#jkflj" class="headerlink" title="jkflj"></a>jkflj</h3><p>###jklj<br>fskaljfasf</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;jklsd&quot;&gt;&lt;a href=&quot;#jklsd&quot; class=&quot;headerlink&quot; title=&quot;jklsd&quot;&gt;&lt;/a&gt;jklsd&lt;/h1&gt;&lt;h3 id=&quot;jkflj&quot;&gt;&lt;a href=&quot;#jkflj&quot; class=&quot;headerlink&quot; title=&quot;jkf
      
    
    </summary>
    
      <category term="Diary" scheme="http://yoursite.com/categories/Diary/"/>
    
    
      <category term="TestA" scheme="http://yoursite.com/tags/TestA/"/>
    
      <category term="TestB" scheme="http://yoursite.com/tags/TestB/"/>
    
  </entry>
  
  <entry>
    <title>TestB</title>
    <link href="http://yoursite.com/2018/01/13/TestB/"/>
    <id>http://yoursite.com/2018/01/13/TestB/</id>
    <published>2018-01-13T14:53:58.000Z</published>
    <updated>2018-01-13T18:07:02.381Z</updated>
    
    <content type="html"><![CDATA[<p>#jklsd  </p><p>##jkflj  </p><p>###jklj<br>fskaljfasf</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#jklsd  &lt;/p&gt;
&lt;p&gt;##jkflj  &lt;/p&gt;
&lt;p&gt;###jklj&lt;br&gt;fskaljfasf&lt;/p&gt;

      
    
    </summary>
    
      <category term="Coding" scheme="http://yoursite.com/categories/Coding/"/>
    
    
      <category term="TestA" scheme="http://yoursite.com/tags/TestA/"/>
    
      <category term="TestB" scheme="http://yoursite.com/tags/TestB/"/>
    
  </entry>
  
  <entry>
    <title>test_my_site</title>
    <link href="http://yoursite.com/2018/01/12/test-my-site/"/>
    <id>http://yoursite.com/2018/01/12/test-my-site/</id>
    <published>2018-01-12T06:03:11.000Z</published>
    <updated>2018-01-12T06:03:11.093Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/01/12/hello-world/"/>
    <id>http://yoursite.com/2018/01/12/hello-world/</id>
    <published>2018-01-12T05:56:50.281Z</published>
    <updated>2018-01-12T05:56:50.281Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
